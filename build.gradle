plugins {
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id "jacoco"
	id 'info.solidsoft.pitest' version '1.5.1'
	id "org.sonarqube" version "3.0"
}

pitest {
	junit5PluginVersion = '0.12'
	targetClasses = ['com.github.mikesafonov.operatorbot.*']
	threads = 4
	outputFormats = ["HTML", "XML"]
	enableDefaultIncrementalAnalysis = true
	timestampedReports = false
	historyInputLocation = ".pitest/pitHistory.txt"
	historyOutputLocation = ".pitest/pitHistory.txt"
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR3'
	}
}

group = 'com.github.mikesafonov'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'

	implementation "org.telegram:telegrambots-spring-boot-starter:5.0.1"
	implementation 'org.mockito:mockito-core'

	implementation("io.micrometer:micrometer-core")
	implementation("io.micrometer:micrometer-registry-prometheus")

	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	implementation "org.flywaydb:flyway-core"
	compileOnly 'org.projectlombok:lombok:1.18.4'
	annotationProcessor 'org.projectlombok:lombok:1.18.4'

	configurations.all {
		resolutionStrategy.dependencySubstitution.all { dependency ->
			if (dependency.requested instanceof ModuleComponentSelector && dependency.requested.module == 'spring-boot-starter-logging') {
				dependency.useTarget("org.springframework.boot:spring-boot-starter-log4j2:$dependency.requested.version", 'Use Log4j2 instead of Logback')
			}
		}
	}
}

jacoco {
	toolVersion = "0.8.3"
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	reports {
		xml.enabled true
		csv.enabled false
	}
}

sonarqube {
	properties {
		property "sonar.sourceEncoding", "UTF-8"
		property 'sonar.host.url', 'https://sonarcloud.io'
		property 'sonar.organization', 'mikesafonov-github'
		property 'sonar.projectKey', 'MikeSafonov_operator-bot'
		property 'sonar.projectName', 'operator-bot'
		property 'sonar.projectVersion', '0.0.1'
		property 'sonar.sources', 'src/main'
		property 'sonar.tests', 'src/test'
		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
		property 'sonar.exclusions', '**/main/resources/**'
		property 'sonar.java.binaries', 'build/classes'
		property 'sonar.links.homepage', 'https://github.com/MikeSafonov/operator-bot'
		property 'sonar.links.ci', 'https://github.com/MikeSafonov/operator-bot/actions'
		property 'sonar.links.scm', 'https://github.com/MikeSafonov/operator-bot'
		property 'sonar.links.issue', 'https://github.com/MikeSafonov/operator-bot/issues'
    }
}
